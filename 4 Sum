Time Complexity : O(N^4)
Space Complexity : O(No.of Quads)*2#include<iostream>
using namespace std;
#include<vector>
#include<set>
#include<algorithm>

vector<vector<int>>fourSum(int n,vector<int> &arr,int target)
{
    set<vector<int>>st;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            for(int k=j+1;k<n;k++)
            {
                for(int l=k+1;l<n;l++)
                {
                   long long sum = arr[i]+arr[j];
                   sum+=arr[k];
                   sum+=arr[l];
                   if(sum==target)
                  {
                    vector<int>temp={arr[i],arr[j],arr[k],arr[l]};
                    sort(temp.begin(),temp.end());
                    st.insert(temp);
                }
                }
        }
    }
    }
    vector<vector<int>>ans(st.begin(),st.end());
    return ans;
}

int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int target;
    cout<<"Enter Target ";
    cin>>target;
    vector<vector<int>>result=fourSum(n,arr,target);
    for(auto quad : result)
    {
        cout<<"[" << quad[0] <<"," <<quad[1]<<","<<quad[2]<< ","<<quad[3] <<"]" <<endl;
    }
    }

------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity : O(N^3 * log (M))
Space Complexity : O(N) + O(Quads)*2

#include<iostream>
using namespace std;
#include<vector>
#include<set>
#include<algorithm>

vector<vector<int>>fourSum(int n,vector<int> &arr,int target)
{
    set<vector<int>>st;
     for(int i=0;i<n;i++)
     {
         for(int j=i+1;j<n;j++)
         {
         set<long long>hashset;
         for(int k=j+1;k<n;k++)
         {
            int sum=arr[i]+arr[j];
             sum+=arr[k];
             int fourth= target-(sum);
             if(hashset.find(fourth)!=hashset.end()){
                 vector<int>temp={arr[i],arr[j],arr[k],fourth};
                 sort(temp.begin(),temp.end());
                 st.insert(temp);
             }
             hashset.insert(arr[k]);
             }
         }
     }
    vector<vector<int>>ans(st.begin(),st.end());
    return ans;
}

int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int target;
    cin>>target;
    vector<vector<int>>result=fourSum(n,arr,target);
    for(auto quad : result)
    {
        cout<<"[" << quad[0] <<"," <<quad[1]<<","<<quad[2]<<"," <<quad[3]<<"]" << endl;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity : O(N^3)
Space Complexity  : O(No.of Quads)

#include<iostream>
using namespace std;
#include<vector>
#include<set>
#include<algorithm>

vector<vector<int>>fourSum(int n,vector<int> &arr,int target)
{
  vector<vector<int>> ans;
  sort(arr.begin(),arr.end());
  for(int i=0;i<n;i++)
  {
      if(i>0 && arr[i]==arr[i-1])
      continue;
      for(int j=i+1;j<n;j++)
      {
      if(j!=(i+1) && arr[j]==arr[j-1])
      continue;
      int k=j+1;
      int l= n-1;
      while(k<l)
      {
          int sum = arr[i] +arr[j]+arr[k]+arr[l];
          if(sum < target)
          {
              k++;
          }
          else if(sum>target)
          {
              l--;
          }
          else
          {
              vector<int>temp ={ arr[i],arr[j],arr[k],arr[l]};
              ans.push_back(temp);
              k++;
              l--;
              while(k<l && arr[k]==arr[k-1])k++;
              while(k<l && arr[l] == arr[l+1])l--;
          }
      }
  }
}
  return ans;   
}

int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int target;
    cin>>target;
    vector<vector<int>>result=fourSum(n,arr,target);
    for(auto quad : result)
    {
        cout<<"[" << quad[0] <<"," <<quad[1]<<","<<quad[2]<<","<<quad[3]<<"]"<<endl;
    }
}

