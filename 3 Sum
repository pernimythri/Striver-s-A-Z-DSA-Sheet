Time Complexity : O(N^3) * log(No.of unique triplets)
Space Complexity : 2 * O(No.of unique triplets)

#include<iostream>
using namespace std;
#include<vector>
#include<set>
#include<algorithm>

vector<vector<int>>triplet(int n,vector<int> &arr)
{
    set<vector<int>>st;
    for(int i=0;i<n-2;i++)
    {
        for(int j=i+1;j<n-1;j++)
        {
            for(int k=j+1;k<n;k++)
            {
                if(arr[i]+arr[j]+arr[k]==0)
                {
                    vector<int>temp={arr[i],arr[j],arr[k]};
                    sort(temp.begin(),temp.end());
                    st.insert(temp);
                }
            }
        }
    }
    vector<vector<int>>ans(st.begin(),st.end());
    return ans;
}

int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    vector<vector<int>>result=triplet(n,arr);
    for(auto triplet : result)
    {
        cout<<"[" << triplet[0] <<"," <<triplet[1]<<","<<triplet[2]<<"]" <<endl;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity : O(N^2 * log M)
Space Complexity : O(N) + O(No.of unique triplets)

#include<iostream>
using namespace std;
#include<vector>
#include<set>
#include<algorithm>

vector<vector<int>>triplet(int n,vector<int> &arr)
{
    set<vector<int>>st;
     for(int i=0;i<n;i++)
     {
         set<int>hashset;
         for(int j=1;j<n;j++)
         {
             int third = -(arr[i]+arr[j]);
             if(hashset.find(third)!=hashset.end()){
                 vector<int>temp={arr[i],arr[j],third};
                 sort(temp.begin(),temp.end());
                 st.insert(temp);
             }
             hashset.insert(arr[j]);
             }
         }
    vector<vector<int>>ans(st.begin(),st.end());
    return ans;
}

int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    vector<vector<int>>result=triplet(n,arr);
    for(auto triplet : result)
    {
        cout<<"[" << triplet[0] <<"," <<triplet[1]<<","<<triplet[2]<<"]" << endl;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity : O(N log N ) * O(N^2)
Space Complexity  : O(No.of unique triplets)

#include<iostream>
using namespace std;
#include<vector>
#include<set>
#include<algorithm>

vector<vector<int>>triplet(int n,vector<int> &arr)
{
  vector<vector<int>> ans;
  sort(arr.begin(),arr.end());
  for(int i=0;i<n;i++)
  {
      if(i>0 && arr[i]==arr[i-1])
      continue;
      int j=i+1;
      int k= n-1;
      while(j<k)
      {
          int sum = arr[i] +arr[j]+arr[k] ;
          if(sum < 0)
          {
              j++;
          }
          else if(sum>0)
          {
              k--;
          }
          else
          {
              vector<int>temp ={ arr[i],arr[j],arr[k]};
              ans.push_back(temp);
              j++;
              k--;
              while(j<k && arr[j]==arr[j-1])j++;
              while(j<k && arr[k] == arr[k+1])k--;
          }
      }
  }
  return ans;   
}

int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    vector<vector<int>>result=triplet(n,arr);
    for(auto triplet : result)
    {
        cout<<"[" << triplet[0] <<"," <<triplet[1]<<","<<triplet[2]<<"]";
    }
}

