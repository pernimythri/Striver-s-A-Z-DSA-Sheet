Time Complexity : O(No.of rows)
Space Complexity : O(1)

#include<iostream>
using namespace std;
#include<vector>

int fun(int n,int r)
{
    int  ans=1;
    for(int i=0;i<r;i++)
    {
        ans*=(n-i);
        ans/=(i+1);
    }
    return ans;
}

int main()
{
    int row,col;
    cin>>row>>col;
    cout<<fun(row-1,col-1);
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity : O(N)
Space Complexity : O(1)

#include<iostream>
using namespace std;
#include<vector>


void pascalTriangle(int row)
{
     int  ans=1;
    cout<<ans<<" ";
    for(int i=1;i<row;i++)
    {
        ans*=(row-i);
        ans/=(i);
        cout<<ans<<" ";
}
}
int main()
{
    int row;
    cin>>row;
    pascalTriangle(row);
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity : O(N^2)

#include<iostream>
using namespace std;
#include<vector>

vector<int>generateRow(int row)
{
    long long ans=1;
    vector<int>ansRow;
    ansRow.push_back(1);
    for(int col=1;col<row;col++)
    {
        ans=ans*(row-col);
        ans=ans/col;
        ansRow.push_back(ans);
    }
    return ansRow;
}
vector<vector<int>>pascalTriangle(int n)
    {
        vector<vector<int>>ans;
        for(int i=1;i<=n;i++)
        {
            ans.push_back(generateRow(i));
        }
        return ans;
    }

int main()
{
    int n;
    cin>>n;
   vector<vector<int>> triangle = pascalTriangle(n);

    for ( auto row : triangle) {
        for (int num : row) {
            cout << num << " ";
        }
        cout << endl;
    }
}

